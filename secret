#!/usr/bin/python3

import base64
import sys
import os

from collections import deque
from hashlib import sha512
from PIL import Image as PIL_Image
from PIL.Image import Image

B64_SYMBOLS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

B64_TRANSLATE_FWD = {ord(c): i for i, c in enumerate(B64_SYMBOLS)}
B64_TRANSLATE_REV = {i: ord(c) for i, c in enumerate(B64_SYMBOLS)}

LFSR_LENGTH = 31
LFSR_TAPS = (28, 31)

# IMAGE_FORMAT = "BMP"
IMAGE_FORMAT = "PNG"
# IMAGE_MODE = "RGBA"
IMAGE_MODE = "RGB"


class LFSR:
    def __init__(self, length: int, taps: tuple[int, ...], seed: bytes) -> None:
        self.taps = taps

        seed_len = len(seed)

        if seed_len >= length:
            new_seed = seed[:length]
        else:
            new_seed = list()
            for i in range(length):
                new_seed.append(seed[i % seed_len])

        self.reg = deque(new_seed, maxlen=length)

    def next(self) -> int:
        next = 0
        for tap in self.taps:
            next = next ^ self.reg[tap - 1]
        self.reg.pop()
        self.reg.appendleft(next)
        return next


class Cypher:
    def __init__(self, secret: str) -> None:
        self._secret = sha512(secret.encode("utf-8")).digest()
        self._idx = 0
        self._len = len(self._secret)
        self._next = self._secret[0]
        self.lfsr = LFSR(LFSR_LENGTH, LFSR_TAPS, self._secret)
        self._dice_roll()

    @staticmethod
    def _b64encode(s: bytes) -> bytes:
        return base64.b64encode(s).rstrip(b"=")

    @staticmethod
    def _b64decode(s: bytes) -> bytes:
        try:
            return base64.b64decode(s)
        except Exception:
            return base64.b64decode(s + b"=" * (-len(s) % 4))

    def _dice_roll(self) -> None:
        roll = int.from_bytes(self._secret[:2], "little")
        for _ in range(roll):
            self.lfsr.next()

    def _reset(self):
        self._idx = 0
        self._next = self._secret[0]

    @property
    def next(self) -> int:
        old_idx = self._idx
        self._idx = (self._idx + 1) % self._len
        return self._secret[old_idx]

    @property
    def next64(self) -> int:
        return self.next % 64

    def _encode(self, payload: bytes) -> bytes:
        self._reset()
        return bytes(
            B64_TRANSLATE_FWD[c] ^ self.next64 for c in self._b64encode(payload)
        )

    def _decode(self, payload: bytes) -> bytes:
        self._reset()
        return self._b64decode(
            bytes(B64_TRANSLATE_REV[b ^ self.next64] for b in payload)
        )

    def _mix(self, data: bytes) -> bytes:
        self._reset()
        return bytes(b ^ self.next for b in data)

    def _scramble(self, data: bytes) -> bytes:
        return bytes((b ^ self.lfsr.next()) & 0x3F for b in data)

    def encode_payload(self, payload: bytes) -> bytes:
        encoded = self._encode(self._mix(payload))
        header = self._encode(len(encoded).to_bytes(4, "little"))
        return self._scramble(header + encoded)

    def decode_header(self, payload: bytes) -> int:
        return int.from_bytes(self._decode(self._scramble(payload)), "little")

    def decode_payload(self, payload: bytes) -> bytes:
        return self._mix(self._decode(self._scramble(payload)))


def read_image(file: str) -> Image:
    return PIL_Image.open(file).convert(IMAGE_MODE)


def store_image(file: str, img: Image) -> None:
    parts = file.rsplit(".", maxsplit=1)

    if len(parts) == 2:
        fname = f"{parts[0]}_encoded.{IMAGE_FORMAT.lower()}"
    else:
        fname = f"{file}_encoded"

    with open(fname, "wb") as f:
        if IMAGE_FORMAT == "PNG":
            img.save(f, "PNG", optimize=True)
        else:
            img.save(f, "BMP")


def get_bits(rgb: tuple[int, int, int]) -> int:
    return rgb[0] & 0x1 | (rgb[1] & 0x1) << 1 | (rgb[2] & 0x1) << 2


def set_bits(rgb: tuple[int, int, int], bits: int) -> tuple[int, int, int]:
    return (
        (rgb[0] & 0xFE) | (bits & 0x1),
        (rgb[1] & 0xFE) | (bits & 0x2) >> 1,
        (rgb[2] & 0xFE) | (bits & 0x4) >> 2,
    )


def encrypt(file: str, secret: str, input: str) -> None:
    if not secret:
        raise ValueError("Secret should be a non empty string")

    if os.path.exists(input):
        with open(input, "rb") as f:
            payload = f.read()
    else:
        payload = input.encode("utf-8")

    if len(payload) > (2**32 - 1):
        raise ValueError("Payload size is too big")

    cypher = Cypher(secret)

    body = cypher.encode_payload(payload)

    img = read_image(file)

    if (img.width * img.height) < len(body) * 2:
        print(img.width * img.height, len(body))
        raise ValueError("Image size is to small to contain payload")

    output = PIL_Image.new(IMAGE_MODE, img.size, (255, 255, 255, 0))

    original_pixels = list(img.getdata())  # type: ignore

    pixels_iter = iter(original_pixels)
    new_pixels: list[tuple[int, int, int]] = list()

    for b in body:
        lsb = b & 0x07
        msb = (b & 0x38) >> 3
        new_pixels.append(set_bits(next(pixels_iter), lsb))
        new_pixels.append(set_bits(next(pixels_iter), msb))

    # put the remain pixels form an original image
    for px in pixels_iter:
        new_pixels.append(set_bits(px, cypher.lfsr.next()))

    output.putdata(new_pixels)
    store_image(file, output)


def decrypt(file: str, secret: str, output) -> None:
    if not secret:
        raise ValueError("Secret should be a non empty string")

    cypher = Cypher(secret)

    img = read_image(file)

    pixels = list(img.getdata())  # type: ignore
    pixels_iter = iter(pixels)

    header = bytes()

    for _ in range(6):
        lsb = get_bits(next(pixels_iter))
        msb = get_bits(next(pixels_iter))
        header += (msb << 3 | lsb).to_bytes(1, "little")

    length = cypher.decode_header(header)

    if length * 2 > (img.width * img.height):
        print()

    payload = bytes()

    for _ in range(length):
        lsb = get_bits(next(pixels_iter))
        msb = get_bits(next(pixels_iter))
        payload += (msb << 3 | lsb).to_bytes(1, "little")

    try:
        data = cypher.decode_payload(payload)
    except Exception:
        sys.exit(-1)

    if output is not None:
        with open(output, "wb") as f:
            f.write(data)
    else:
        try:
            print(data.decode("utf-8"), end="")
        except UnicodeDecodeError:
            sys.stdout.buffer.write(data)
        except Exception:
            sys.exit(-1)


if __name__ == "__main__":
    args = sys.argv[1:]

    USAGE = """
Usage:
  * Encryption:
    secret encode [image_file_name] "secret_string" "payload_string"
    secret encode [image_file_name] "secret_string" [path_to_file]

  * Decryption:
    secret decode [image_file_name] [secret_string]
    secret decode [image_file_name] [secret_string] [path_to_file]
"""

    def usage():
        print(USAGE)
        sys.exit(0)

    if not args or args[0] not in ("encode", "decode"):
        usage()

    if args[0] == "encode":
        if len(args) != 4:
            usage()
        encrypt(*args[1:])
    else:
        if len(args) < 3:
            usage()
        if len(args) == 3:
            decrypt(args[1], args[2], None)
        else:
            decrypt(*args[1:])
